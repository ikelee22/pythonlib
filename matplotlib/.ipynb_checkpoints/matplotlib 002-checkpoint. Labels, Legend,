{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-23T07:23:36.414871Z",
     "start_time": "2019-12-23T07:23:36.409007Z"
    }
   },
   "source": [
    "<img src='./img/intel-logo.jpg' width=10%> \n",
    "    \n",
    "<font size=7><div align='left'>Matplotlib Introduction<br>\n",
    "<br>\n",
    "<font size=6><div align='left'>02. 제목과 범례 추가<br>\n",
    "<img src='./img/matplotlib_logo.png' width=30%, Fig2> \n",
    "    \n",
    "<font size=3><div align='right'>\n",
    "<div align='right'>성  민  석 (Minsuk  Sung)</div>\n",
    "<div align='right'>류  회  성 (Hoesung Ryu)</div>\n",
    "<div align='right'>이  인  구 (Ike Lee)</div>\n",
    "    \n",
    "    \n",
    "---    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#그림-제목(title)과-축-라벨(label)-설정\" data-toc-modified-id=\"그림-제목(title)과-축-라벨(label)-설정-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>그림 제목(title)과 축 라벨(label) 설정</a></span></li><li><span><a href=\"#그리드-설정\" data-toc-modified-id=\"그리드-설정-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>그리드 설정</a></span></li><li><span><a href=\"#범례(Legend)-표시\" data-toc-modified-id=\"범례(Legend)-표시-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>범례(Legend) 표시</a></span><ul class=\"toc-item\"><li><span><a href=\"#범례-크기-조절\" data-toc-modified-id=\"범례-크기-조절-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>범례 크기 조절</a></span></li><li><span><a href=\"#범례-투명도-조절\" data-toc-modified-id=\"범례-투명도-조절-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>범례 투명도 조절</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 그림 제목(title)과 축 라벨(label) 설정\n",
    "\n",
    "\n",
    "데이터가 의미하는 바를 명확하게 표시하기 위해서 그림의 제목(title) 과 x축 위치와 y축 위치에 라벨(label)을 추가할 수 있습니다. \n",
    "\n",
    "제목은 `title` 명령어로 표시합니다. \n",
    "x 라벨과 y 라벨은 `xlabel`, `ylabel` 명령어를 사용하여 표시 할 수 있습니다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-24T08:08:44.540608Z",
     "start_time": "2019-12-24T08:08:44.517957Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-24T08:08:45.217878Z",
     "start_time": "2019-12-24T08:08:44.997446Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.linspace(-np.pi, np.pi, 256)\n",
    "C, S = np.cos(X), np.sin(X)\n",
    "plt.plot(X, C, label=\"cosine\")\n",
    "plt.xlabel(\"time\") # x 축 이름\n",
    "plt.ylabel(\"amplitude\") # y 축 이름\n",
    "plt.title(\"Cosine Plot\") # 제목 \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 그리드 설정\n",
    "\n",
    "틱 위치를 잘 보여 주기 위해 그림 중간에 그리드 선(grid line)\n",
    "을 그릴 수 있습니다. \n",
    "> 그리드를 사용하려면 `grid(True)` 명령을 사용합니다. <p>\n",
    "> 그리드를 사용하지 않으려면 `grid(False)` 명령을 사용합니다. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-24T08:09:57.339698Z",
     "start_time": "2019-12-24T08:09:57.055623Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.linspace(-np.pi, np.pi, 256)\n",
    "C, S = np.cos(X), np.sin(X)\n",
    "plt.plot(X, C, label=\"cosine\")\n",
    "plt.xlabel(\"time\") # x 축 이름\n",
    "plt.ylabel(\"amplitude\") # y 축 이름\n",
    "plt.title(\"Cosine Plot\") # 제목 \n",
    "plt.grid(True) # 그리드 설정 \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 범례(Legend) 표시\n",
    "\n",
    "여러 개의 그래프를 동시에 그리는 경우, 각 선이 어떠한 자료를 표시하는지 보여주기 위해 `legend` 명령으로 범례(legend)를 추가합니다. \n",
    "일반적으로 범례의 위치는 자동으로 정해지지만, 수동으로 설정하기 위해서는 `loc` 인수를 사용합니다. \n",
    "\n",
    "- 자동으로 위치 지정\n",
    "```python\n",
    "plt.legend([ 그래프1, 그래프2 ])\n",
    "```\n",
    "\n",
    "- 최적의 위치를 자동으로 위치 지정\n",
    "```python\n",
    "plt.legend(loc='best')\n",
    "```\n",
    "\n",
    "이 이외에 사용자가 직접 명시할 수 있는 다음과 같은 옵션이 있습니다. \n",
    "\n",
    "```python\n",
    "plt.legend(loc='upper right')\n",
    "plt.legend(loc='upper left')\n",
    "plt.legend(loc='upper center')\n",
    "\n",
    "plt.legend(loc='lower right')\n",
    "plt.legend(loc='lower left')\n",
    "plt.legend(loc='lower center')\n",
    "\n",
    "plt.legend(loc='center right')\n",
    "plt.legend(loc='center left')\n",
    "plt.legend(loc='center center')\n",
    "\n",
    "```\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-23T07:36:00.781422Z",
     "start_time": "2019-12-23T07:36:00.545750Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#X = np.linspace(-np.pi, np.pi, 256)\n",
    "X = np.linspace(-3.0, 3.0, num=256, retstep=False)\n",
    "C, S = np.cos(X), np.sin(X)\n",
    "plt.plot(X, C, label=\"cosine\")\n",
    "plt.plot(X, S, label=\"sine\")\n",
    "\n",
    "plt.xlabel(\"time\")\n",
    "plt.ylabel(\"amplitude\")\n",
    "plt.title(\"Cosine and Sine Plot\")\n",
    "\n",
    "\n",
    "plt.legend(loc='best') # 최적의 위치를 자동으로 위치 지정\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 범례 크기 조절  \n",
    "\n",
    "`fontsize`로 레전드의 폰트속성을 변경 할 수 있으며, 다음과 같은 값을 넣을 수 있습니다.  \n",
    "\n",
    "`'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-24T08:24:18.946845Z",
     "start_time": "2019-12-24T08:24:18.733650Z"
    }
   },
   "outputs": [],
   "source": [
    "X = np.linspace(-np.pi, np.pi, 256)\n",
    "C, S = np.cos(X), np.sin(X)\n",
    "plt.plot(X, C, label=\"cosine\")\n",
    "plt.plot(X, S, label=\"sine\")\n",
    "\n",
    "plt.xlabel(\"time\")\n",
    "plt.ylabel(\"amplitude\")\n",
    "plt.title(\"Cosine and Sine Plot\")\n",
    "\n",
    " # 최적의 위치를 자동으로 위치 지정, \n",
    "plt.legend(loc='best',fontsize='large')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 범례 투명도 조절\n",
    "\n",
    "범례의 투명도는 `shadow=True`으로 설정 할 수 있습니다. \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.linspace(-np.pi, np.pi, 256)\n",
    "C, S = np.cos(X), np.sin(X)\n",
    "plt.plot(X, C, label=\"cosine\")\n",
    "plt.plot(X, S, label=\"sine\")\n",
    "\n",
    "plt.xlabel(\"time\")\n",
    "plt.ylabel(\"amplitude\")\n",
    "plt.title(\"Cosine and Sine Plot\")\n",
    "\n",
    " # 최적의 위치를 자동으로 위치 지정, \n",
    "plt.legend(loc='upper right',shadow=True,fontsize='large')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### numpy.linspace\n",
    "numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)\n",
    "시작과 끝값을 취해서 각격을 균등하게 배분 합니다. \n",
    "\n",
    "#### Parameters:\t\n",
    "            start : scalar : x축 시작 값.\n",
    "            stop  : x축 끝지점 값.\n",
    "                    endpoint=False 로하면 num +1 개로 나누어 마지막것을 제외 합니다. \n",
    "            num   : int, optional. 기본 값은  50 이고 음수는 안됩니다. \n",
    "            endpoint : bool, optional: True 나 False 중 하나. \n",
    "            retstep  : bool, optional : True 나 False 중 하나. \n",
    "            dtype    : dtype, optional : dtype을 정해주지 않으면 다른 입력값의 데이터 타입을 참조.\n",
    "#### Returns:   \n",
    "            samples : ndarray : 시작과 끝값을 균등하게 나눕니다. \n",
    "            step    : float : retstep si True 일때만 나타내 줍니다. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.linspace(2.0, 3.0, num=5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "np.linspace(2.0, 3.0, num=5, endpoint=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "np.linspace(2.0, 3.0, num=5, retstep=True)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "168px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
