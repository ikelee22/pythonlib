{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<img src='./img/intel-logo.jpg' width=30%> \n",
    "    \n",
    "<font size=7><div align='left'>판다스 기초강의<br>\n",
    "<br>\n",
    "<font size=6><div align='left'>03. 데이터 불러오기<br>\n",
    "    \n",
    "<font size=3><div align='right'>\n",
    "<div align='right'>성  민  석 (Minsuk  Sung)</div>\n",
    "<div align='right'>류  회  성 (Hoesung Ryu)</div>\n",
    "<div align='right'>이  인  구 (Ike Lee)</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>강의목차<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#csv-파일-읽기-read_csv()\" data-toc-modified-id=\"csv-파일-읽기-read_csv()-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>csv 파일 읽기 read_csv()</a></span><ul class=\"toc-item\"><li><span><a href=\"#컬럼명이-존재하는-csv-파일\" data-toc-modified-id=\"컬럼명이-존재하는-csv-파일-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>컬럼명이 존재하는 csv 파일</a></span></li><li><span><a href=\"#컬럼명이-없는-csv-파일\" data-toc-modified-id=\"컬럼명이-없는-csv-파일-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;</span>컬럼명이 없는 csv 파일</a></span></li><li><span><a href=\"#정규표현식-사용하여-DataFrame-읽어오기\" data-toc-modified-id=\"정규표현식-사용하여-DataFrame-읽어오기-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;</span>정규표현식 사용하여 DataFrame 읽어오기</a></span></li><li><span><a href=\"#주석이-포함되어-있는-파일-읽기\" data-toc-modified-id=\"주석이-포함되어-있는-파일-읽기-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;</span>주석이 포함되어 있는 파일 읽기</a></span></li></ul></li><li><span><a href=\"#용량이-큰-파일-읽기\" data-toc-modified-id=\"용량이-큰-파일-읽기-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>용량이 큰 파일 읽기</a></span><ul class=\"toc-item\"><li><span><a href=\"#10줄만-읽어오기\" data-toc-modified-id=\"10줄만-읽어오기-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>10줄만 읽어오기</a></span></li><li><span><a href=\"#실제-파일을-읽는-게-아니라,-Reader-객체만-생성하여,-일정-갯수만큼씩-읽어오기\" data-toc-modified-id=\"실제-파일을-읽는-게-아니라,-Reader-객체만-생성하여,-일정-갯수만큼씩-읽어오기-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>실제 파일을 읽는 게 아니라, Reader 객체만 생성하여, 일정 갯수만큼씩 읽어오기</a></span></li></ul></li><li><span><a href=\"#클립보드를-이용하여-데이터-읽기\" data-toc-modified-id=\"클립보드를-이용하여-데이터-읽기-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>클립보드를 이용하여 데이터 읽기</a></span></li><li><span><a href=\"#데이터베이스에서-읽기\" data-toc-modified-id=\"데이터베이스에서-읽기-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>데이터베이스에서 읽기</a></span><ul class=\"toc-item\"><li><span><a href=\"#테이블-생성-SQL-정의\" data-toc-modified-id=\"테이블-생성-SQL-정의-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>테이블 생성 SQL 정의</a></span></li><li><span><a href=\"#sqlite-접속\" data-toc-modified-id=\"sqlite-접속-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>sqlite 접속</a></span></li><li><span><a href=\"#테이블-생성-SQL-수행\" data-toc-modified-id=\"테이블-생성-SQL-수행-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;</span>테이블 생성 SQL 수행</a></span></li><li><span><a href=\"#생성된-테이블에-저장할-데이터-정의\" data-toc-modified-id=\"생성된-테이블에-저장할-데이터-정의-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;</span>생성된 테이블에 저장할 데이터 정의</a></span></li><li><span><a href=\"#데이터-적재-SQL-정의\" data-toc-modified-id=\"데이터-적재-SQL-정의-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;</span>데이터 적재 SQL 정의</a></span></li><li><span><a href=\"#데이터-적재-SQL-수행\" data-toc-modified-id=\"데이터-적재-SQL-수행-4.6\"><span class=\"toc-item-num\">4.6&nbsp;&nbsp;</span>데이터 적재 SQL 수행</a></span></li><li><span><a href=\"#Select-SQL-실행1\" data-toc-modified-id=\"Select-SQL-실행1-4.7\"><span class=\"toc-item-num\">4.7&nbsp;&nbsp;</span>Select SQL 실행1</a></span></li><li><span><a href=\"#Select-SQL-실행2\" data-toc-modified-id=\"Select-SQL-실행2-4.8\"><span class=\"toc-item-num\">4.8&nbsp;&nbsp;</span>Select SQL 실행2</a></span></li></ul></li><li><span><a href=\"#엑셀파일-읽기\" data-toc-modified-id=\"엑셀파일-읽기-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>엑셀파일 읽기</a></span><ul class=\"toc-item\"><li><span><a href=\"#첫번째-시트-읽기\" data-toc-modified-id=\"첫번째-시트-읽기-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;</span>첫번째 시트 읽기</a></span></li><li><span><a href=\"#두번째-시트-읽기\" data-toc-modified-id=\"두번째-시트-읽기-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;</span>두번째 시트 읽기</a></span></li><li><span><a href=\"#모든-시트-다-읽어오기\" data-toc-modified-id=\"모든-시트-다-읽어오기-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;</span>모든 시트 다 읽어오기</a></span></li><li><span><a href=\"#sheet--각-각-저장\" data-toc-modified-id=\"sheet--각-각-저장-5.4\"><span class=\"toc-item-num\">5.4&nbsp;&nbsp;</span>sheet  각 각 저장</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## csv 파일 읽기 read_csv()\n",
    "`read_csv()`에 대한 [공식 문서](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:11:15.972971Z",
     "start_time": "2019-12-02T15:11:15.962587Z"
    }
   },
   "source": [
    "### 컬럼명이 존재하는 csv 파일"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-15T06:51:44.945188Z",
     "start_time": "2019-12-15T06:51:44.664264Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "pd.read_csv('./data/ex1.csv') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:11:30.058155Z",
     "start_time": "2019-12-02T15:11:30.047742Z"
    }
   },
   "source": [
    "### 컬럼명이 없는 csv 파일"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-15T06:51:49.399564Z",
     "start_time": "2019-12-15T06:51:49.384390Z"
    }
   },
   "outputs": [],
   "source": [
    "# 컬럼명이 지정되 있지 않은 데이터는 첫번째 데이터가 헤더가 되버림\n",
    "pd.read_csv('./data/ex2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:19:31.039040Z",
     "start_time": "2019-12-02T15:19:31.027344Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.read_csv('data/ex2.csv',\n",
    "            header = None, #  csv 파일의 첫번째 줄이 컬럼명이 아님을 명시함.\n",
    "            names = ['a','b','c','d','e'] #컬럼명을 다음과 같이 가져오게 됩니다.  \n",
    "           ) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 정규표현식 사용하여 DataFrame 읽어오기 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:13:37.020223Z",
     "start_time": "2019-12-02T15:13:37.010498Z"
    }
   },
   "outputs": [],
   "source": [
    "# data/ex3.csv 읽기\n",
    "pd.read_csv('./data/ex3.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:13:42.845178Z",
     "start_time": "2019-12-02T15:13:42.833046Z"
    }
   },
   "outputs": [],
   "source": [
    "# sep에는 정규표현식으로 가능, 이렇게 하면 연속된 것을 하나로 인식하기\n",
    "pd.read_csv('./data/ex3.csv',sep='\\s+') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:15:33.609135Z",
     "start_time": "2019-12-02T15:15:33.595021Z"
    }
   },
   "source": [
    "### 주석이 포함되어 있는 파일 읽기\n",
    "skiprows를 이용하여, 특정 행을 읽지 않도록 합니다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:23:25.790207Z",
     "start_time": "2019-12-02T15:23:25.774839Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.read_csv('./data/ex4.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:23:55.942868Z",
     "start_time": "2019-12-02T15:23:55.931995Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.read_csv('./data/ex4.csv',\n",
    "            skiprows = [0,2,3]) # 0,2,3번째 행을 읽지 않기안게 합니다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:24:54.128427Z",
     "start_time": "2019-12-02T15:24:54.117745Z"
    }
   },
   "outputs": [],
   "source": [
    "#2. comment 인자를 이용하여, 주석은 데이터로 읽지 않음.\n",
    "pd.read_csv('./data/ex4.csv', comment = '#') # #으로 시작하는 줄을 주석이 읽지안게 합니다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-15T06:57:44.965440Z",
     "start_time": "2019-12-15T06:57:44.955582Z"
    }
   },
   "outputs": [],
   "source": [
    "test = pd.read_csv('./data/ex4.csv', comment = '#') # 변경된 내용을 파일로 저장 하기. \n",
    "test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 용량이 큰 파일 읽기\n",
    "\n",
    "- 로딩 시간이 오래걸림\n",
    "- 메모리 부족 시 OOM(Out Of Memory)가 발생할수 있습니다. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:27:13.991092Z",
     "start_time": "2019-12-02T15:27:13.966477Z"
    }
   },
   "source": [
    "### 10줄만 읽어오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:27:59.330412Z",
     "start_time": "2019-12-02T15:27:59.306544Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.read_csv('data/us_presidental.csv',nrows=10) # 앞의 일부분만 볼 수 있음"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 실제 파일을 읽는 게 아니라, Reader 객체만 생성하여, 일정 갯수만큼씩 읽어오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:28:01.823652Z",
     "start_time": "2019-12-02T15:28:01.818726Z"
    }
   },
   "outputs": [],
   "source": [
    "reader = pd.read_csv('data/us_presidental.csv',chunksize=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:28:08.013307Z",
     "start_time": "2019-12-02T15:28:07.982541Z"
    }
   },
   "outputs": [],
   "source": [
    "#chunksize만큼 데이터를 읽어옴.\n",
    "next(reader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 그 다음 100줄\n",
    "next(reader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 클립보드를 이용하여 데이터 읽기\n",
    "\n",
    "#IE에서는 안되고, 크롬에서 저장하고자 하는 테이블 형태의 데이터를 복사한 후에 아래 명령어 출력하면, 데이터프레임으로 생성된다.\n",
    "\n",
    "```\n",
    "Not Implemented Error\n",
    "You may get an error message that says: “Pyperclip could not find a copy/paste mechanism for your system. Please see https://pyperclip.readthedocs.io/en/latest/introduction.html#not-implemented-error for how to fix this.”\n",
    "\n",
    "In order to work equally well on Windows, Mac, and Linux, Pyperclip uses various mechanisms to do this. Currently, this error should only appear on Linux (not Windows or Mac). You can fix this by installing one of the copy/paste mechanisms:\n",
    "\n",
    ">sudo apt-get install xsel to install the xsel utility.\n",
    ">sudo apt-get install xclip to install the xclip utility.\n",
    ">pip install gtk to install the gtk Python module.\n",
    ">pip install PyQt4 to install the PyQt4 Python module.```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-15T06:55:44.129263Z",
     "start_time": "2019-12-15T06:55:44.124652Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-15T06:56:03.343500Z",
     "start_time": "2019-12-15T06:56:03.334687Z"
    }
   },
   "outputs": [],
   "source": [
    "# https://m.stock.naver.com\n",
    "# 위주소로 접속하여 복사하도록 합니다.  \n",
    "import pyperclip\n",
    "#pyperclip.copy('Hello world!')\n",
    "#pyperclip.paste()\n",
    "pd.read_clipboard() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 데이터베이스에서 읽기\n",
    "\n",
    "파이썬에서 `sqlite3`를 내장하고 있음\n",
    "\n",
    "1. import 라이브러리하고\n",
    "2. conn으로 접속을 해서 스트림하고\n",
    "3. SQL문을 통해서 execute를 하고\n",
    "4. commit을 하고\n",
    "5. close하면 됨"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:33.195190Z",
     "start_time": "2019-12-02T15:31:33.191959Z"
    }
   },
   "source": [
    "### 테이블 생성 SQL 정의"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:33.195190Z",
     "start_time": "2019-12-02T15:31:33.191959Z"
    }
   },
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "create_table_sql = \"CREATE TABLE locations\\\n",
    "                    ( a VARCHAR[20], b VARCHAR[20], c INTEGER )\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:33.374477Z",
     "start_time": "2019-12-02T15:31:33.371463Z"
    }
   },
   "source": [
    "### sqlite 접속"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:33.374477Z",
     "start_time": "2019-12-02T15:31:33.371463Z"
    }
   },
   "outputs": [],
   "source": [
    "conn = sqlite3.connect('test.db')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:41.081612Z",
     "start_time": "2019-12-02T15:31:41.070992Z"
    }
   },
   "source": [
    "### 테이블 생성 SQL 수행 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:41.081612Z",
     "start_time": "2019-12-02T15:31:41.070992Z"
    }
   },
   "outputs": [],
   "source": [
    "conn.execute(create_table_sql)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:31:57.137212Z",
     "start_time": "2019-12-02T15:31:57.134631Z"
    }
   },
   "outputs": [],
   "source": [
    "conn.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:01.362950Z",
     "start_time": "2019-12-02T15:32:01.359181Z"
    }
   },
   "source": [
    "### 생성된 테이블에 저장할 데이터 정의"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:01.362950Z",
     "start_time": "2019-12-02T15:32:01.359181Z"
    }
   },
   "outputs": [],
   "source": [
    "data = [['서울','강남', 15]\n",
    "       ,['서울','강동', 10]\n",
    "       ,['서울','동대문', 7]\n",
    "       ,['서울','양천', 12]\n",
    "       ,['성남','분당', 12]\n",
    "       ,['수원','영통', 15]\n",
    "       ,['성남','중원', 11]\n",
    "       ,['수원','팔달', 14]\n",
    "       ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:05.098131Z",
     "start_time": "2019-12-02T15:32:05.095276Z"
    }
   },
   "source": [
    "### 데이터 적재 SQL 정의 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:05.098131Z",
     "start_time": "2019-12-02T15:32:05.095276Z"
    }
   },
   "outputs": [],
   "source": [
    "load_data_sql = '''INSERT INTO locations\n",
    "                   VALUES  (?, ?, ?)''' # ?를 해둔 이유는 여기에 데이터를 나중에 넣을 공간이다"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:08.955427Z",
     "start_time": "2019-12-02T15:32:08.951101Z"
    }
   },
   "source": [
    "### 데이터 적재 SQL 수행"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:08.955427Z",
     "start_time": "2019-12-02T15:32:08.951101Z"
    }
   },
   "outputs": [],
   "source": [
    "conn.executemany(load_data_sql,data) # data에 있는 8개 정보를 한줄씩 여러번 하려고"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:32.311927Z",
     "start_time": "2019-12-02T15:32:32.303149Z"
    }
   },
   "outputs": [],
   "source": [
    "# commit() 수행\n",
    "conn.commit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:37.458118Z",
     "start_time": "2019-12-02T15:32:37.447144Z"
    }
   },
   "source": [
    "### Select SQL 실행1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:37.458118Z",
     "start_time": "2019-12-02T15:32:37.447144Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "select_data_sql = '''SELECT *\n",
    "                     FROM locations'''\n",
    "pd.read_sql(select_data_sql,conn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:35:38.456361Z",
     "start_time": "2019-12-02T15:35:38.453979Z"
    }
   },
   "source": [
    "### Select SQL 실행2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:43.278044Z",
     "start_time": "2019-12-02T15:32:43.263370Z"
    }
   },
   "outputs": [],
   "source": [
    "select_data_sql2 = '''SELECT a,sum(c)\n",
    "                      FROM locations\n",
    "                      GROUP BY a'''\n",
    "pd.read_sql(select_data_sql2,conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:47.835832Z",
     "start_time": "2019-12-02T15:32:47.831653Z"
    }
   },
   "outputs": [],
   "source": [
    "# 데이터베이스의 테이블 크기가 큰 경우에는 cursor 사용하기\n",
    "# 한줄씩 읽을 수 있게 만들어줌\n",
    "cursor = conn.execute(select_data_sql)\n",
    "cursor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:51.809697Z",
     "start_time": "2019-12-02T15:32:51.799745Z"
    }
   },
   "outputs": [],
   "source": [
    "# 내가 원하는 갯수만큼 읽어올 수 있음\n",
    "rows = cursor.fetchmany(2)\n",
    "pd.DataFrame(rows) # 다 읽어오면 더이상 읽어올 수 없음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:32:55.553536Z",
     "start_time": "2019-12-02T15:32:55.550619Z"
    }
   },
   "outputs": [],
   "source": [
    "cursor.close()\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 엑셀파일 읽기\n",
    "\n",
    "1. 기본적으로 첫번째 시트에 있는 데이터를 읽어와서 데이터프레임으로 저장함. \n",
    "2. 모든 시트를 읽기 위해서는 sheetname인자를 None으로 설정\n",
    "3. sheetname = None. 모든 시트의 데이터를 읽어서 사전 형태로 저장됨. \n",
    "4. key = 시트의 이름, value = 각 시트에 있는 데이터들을 저장한 데이터프레임 \n",
    "\n",
    "<img src=\"img/excel_example.jpg\" style=\"width: 600px;\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 첫번째 시트 읽기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:39:38.274163Z",
     "start_time": "2019-12-02T15:39:38.223528Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.read_excel('./data/ex6.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 두번째 시트 읽기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:39:49.936683Z",
     "start_time": "2019-12-02T15:39:49.920109Z"
    }
   },
   "outputs": [],
   "source": [
    "# pd.read_excel('./data/ex6.xlsx',sheet_name='시트2') # 설정이 한글 일 경우\n",
    "pd.read_excel('./data/ex6.xlsx',sheet_name='sheet2')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 모든 시트 다 읽어오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:07.314696Z",
     "start_time": "2019-12-02T15:42:07.296778Z"
    }
   },
   "outputs": [],
   "source": [
    "# dict타입으로 반환해줌\n",
    "data = pd.read_excel('./data/ex6.xlsx',sheet_name=None)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:07.870455Z",
     "start_time": "2019-12-02T15:42:07.863897Z"
    }
   },
   "outputs": [],
   "source": [
    "# sheet1\n",
    "# data['시트1'] # 설정이 한글 일 경우\n",
    "data['sheet1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:14.823225Z",
     "start_time": "2019-12-02T15:42:14.816086Z"
    }
   },
   "outputs": [],
   "source": [
    "# sheet2\n",
    "# data['시트2'] # 설정이 한글 일 경우\n",
    "data['sheet2']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###   sheet  각 각 저장"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:16.090756Z",
     "start_time": "2019-12-02T15:42:16.088020Z"
    }
   },
   "outputs": [],
   "source": [
    "data1, data2 = data.values() # 이렇게 하면 각각 저장 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:21.462697Z",
     "start_time": "2019-12-02T15:42:21.456266Z"
    }
   },
   "outputs": [],
   "source": [
    "data1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T15:42:24.943157Z",
     "start_time": "2019-12-02T15:42:24.936123Z"
    }
   },
   "outputs": [],
   "source": [
    "data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "강의목차",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
