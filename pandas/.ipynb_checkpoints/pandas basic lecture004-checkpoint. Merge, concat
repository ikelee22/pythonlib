{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src='./img/intel-logo.jpg' width=30%> \n",
    "    \n",
    "<font size=7><div align='left'>판다스 기초강의<br>\n",
    "<br>\n",
    "<font size=6><div align='left'>04. 데이터 합치기<br>\n",
    "    \n",
    "<font size=3><div align='right'>\n",
    "<div align='right'>성  민  석 (Minsuk  Sung)</div>\n",
    "<div align='right'>류  회  성 (Hoesung Ryu)</div>\n",
    "<div align='right'>이  인  구 (Ike Lee)</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>강의목차<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#pd.concat()\" data-toc-modified-id=\"pd.concat()-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>pd.concat()</a></span><ul class=\"toc-item\"><li><span><a href=\"#concat(-axis-=1-)\" data-toc-modified-id=\"concat(-axis-=1-)-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;</span>concat( axis =1 )</a></span></li><li><span><a href=\"#concat(axis=0)\" data-toc-modified-id=\"concat(axis=0)-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;</span>concat(axis=0)</a></span></li><li><span><a href=\"#concat(axis=0)-ignore_index\" data-toc-modified-id=\"concat(axis=0)-ignore_index-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;</span>concat(axis=0) ignore_index</a></span></li></ul></li><li><span><a href=\"#pd.merge()\" data-toc-modified-id=\"pd.merge()-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>pd.merge()</a></span><ul class=\"toc-item\"><li><span><a href=\"#주요-파라미터-(-pd.merge(df1,df2,-on-=-???))\" data-toc-modified-id=\"주요-파라미터-(-pd.merge(df1,df2,-on-=-???))-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>주요 파라미터 ( pd.merge(df1,df2, on = ???))</a></span></li><li><span><a href=\"#inner-join\" data-toc-modified-id=\"inner-join-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>inner join</a></span></li><li><span><a href=\"#left-outer-join\" data-toc-modified-id=\"left-outer-join-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>left outer join</a></span></li><li><span><a href=\"#right-outer-join\" data-toc-modified-id=\"right-outer-join-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>right outer join</a></span></li><li><span><a href=\"#fully-outer-join\" data-toc-modified-id=\"fully-outer-join-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>fully outer join</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pd.concat()\n",
    "\n",
    "$n$ 개의 데이터 프레임을 컬럼 기준의 합치고 싶은 경우 `axis`를 설정 한 후`concate()`함수를 사용한다. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### concat( axis =1 )\n",
    "<img src=\"img/concat_axis1.png\"  style=\"width: 700px;\"/>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:31.787662Z",
     "start_time": "2019-12-02T16:37:31.778284Z"
    }
   },
   "outputs": [],
   "source": [
    "# DataFrame　생성\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# df1 생성\n",
    "df1 = pd.DataFrame([\n",
    "                    ['Hong', 'Gildong'],\n",
    "                    ['Sung', 'Munsuk'],\n",
    "                    ['Ryu', 'Hoesung'],\n",
    "                    ['Hwang', 'Jinha'],\n",
    "                    ], index=['1','2','3', '4'], columns=['Last name', 'First name']\n",
    "                    )\n",
    "# print 대신 display를 쓰면 이쁘게 출력된다. \n",
    "display(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:32.033345Z",
     "start_time": "2019-12-02T16:37:32.022262Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# df2 생성\n",
    "df2 = pd.DataFrame([\n",
    "                    ['Pyonyang', 21],\n",
    "                    ['Seoul', 27],\n",
    "                    ['Jeju', 29],\n",
    "                    ['Gyeonggi-do', 30]\n",
    "                    ], index=['1','2','3', '4'], columns=['City', 'Age']\n",
    "                    )\n",
    "display(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:32.415185Z",
     "start_time": "2019-12-02T16:37:32.405135Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# concat with axis = 1 수행\n",
    "df = pd.concat([df1,df2], axis=1,sort=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### concat(axis=1)\n",
    "\n",
    "<img src=\"img/axis1.png\" style=\"width: 500px;\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:35.191164Z",
     "start_time": "2019-12-02T16:37:35.186695Z"
    }
   },
   "outputs": [],
   "source": [
    "# df1 생성\n",
    "df1 = pd.DataFrame([\n",
    "                    ['Hong', 'Gildong'],\n",
    "                    ['Sung', 'Munsuk'],\n",
    "                    ['Ryu', 'Hoesung'],\n",
    "                    ['Hwang', 'Jinha'],\n",
    "                    ], index=['1','2','3', '4'], columns=['Last name', 'First name']\n",
    "                    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:35.714664Z",
     "start_time": "2019-12-02T16:37:35.710162Z"
    }
   },
   "outputs": [],
   "source": [
    "# df2 생성\n",
    "df2 = pd.DataFrame([\n",
    "                    ['Lee', 'Chang'],\n",
    "                    ['Kim', 'Chi'],\n",
    "                    ], index=['1','2'], columns=['Last name', 'First name']\n",
    "                    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:36.096688Z",
     "start_time": "2019-12-02T16:37:36.086687Z"
    }
   },
   "outputs": [],
   "source": [
    "# concat with axis = 0 수행\n",
    "df = pd.concat([df1,df2], axis=0,sort=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### concat(axis=0) ignore_index\n",
    "<img src=\"img/concat_axis0_ignore.png\" style=\"width: 700px;\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:37:43.049962Z",
     "start_time": "2019-12-02T16:37:43.040902Z"
    }
   },
   "outputs": [],
   "source": [
    "df = pd.concat([df1,df2], axis=0,sort=True,ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pd.merge()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 주요 파라미터 ( pd.merge(df1,df2, on = ???))\n",
    "\n",
    "- 키를 기준으로 DataFrame의 로우를 합친다. SQL이나 다른 관계형 데이터베이스의 join 연산과 동일함.\n",
    "- 주요 파라미터        \n",
    "  . left, right : merge할 DataFrame 객체이름\n",
    "\n",
    "  . how = 'inner', #left, right, outer\n",
    "\n",
    "  . on = None, #merge의 기준이 되는 컬럼\n",
    "\n",
    "  . left_on = None, #left DataFrame의 기준 컬럼\n",
    "\n",
    "  . right_on = None, #right DataFrame의 기준 컬럼"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:38:44.837190Z",
     "start_time": "2019-12-02T16:38:44.831391Z"
    }
   },
   "outputs": [],
   "source": [
    "# DataFrame 생성\n",
    "df_left = pd.DataFrame({'KEY': ['k0', 'k1', 'k2', 'k3'],\n",
    "                     'A': ['a0', 'a1', 'a2', 'a3'],\n",
    "                     'B': ['b0', 'b1', 'b2', 'b3']})\n",
    "df_right = pd.DataFrame({'KEY': ['k2', 'k3', 'k4', 'k5'],\n",
    "                     'C': ['c2', 'c3', 'c4', 'c5'],\n",
    "                     'D': ['d2', 'd3', 'd4', 'd5']})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:39:58.622597Z",
     "start_time": "2019-12-02T16:39:58.607458Z"
    }
   },
   "outputs": [],
   "source": [
    "print('df_left:')\n",
    "display(df_left)\n",
    "print('-'*15)\n",
    "print('df_right:')\n",
    "display(df_right)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### inner join"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:41:31.929936Z",
     "start_time": "2019-12-02T16:41:31.906200Z"
    }
   },
   "outputs": [],
   "source": [
    "# 4 * 4 = 16번의 연산이 이루어짐\n",
    "# key값이 같은 놈이 나옴 => k2,k3\n",
    "pd.merge(df_left,df_right,how='inner') # inner join이란것을 알려주기 위해서"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### left outer join"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:41:33.507103Z",
     "start_time": "2019-12-02T16:41:33.488117Z"
    }
   },
   "outputs": [],
   "source": [
    "# left에 있는 데이터는 일단 다 출력해달라 -> 없는 놈은 NaN 처리하더라도\n",
    "pd.merge(df_left,df_right,how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### right outer join"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:41:50.365663Z",
     "start_time": "2019-12-02T16:41:50.352959Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.merge(df_left,df_right,how='right')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### fully outer join"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-02T16:42:04.389856Z",
     "start_time": "2019-12-02T16:42:04.368366Z"
    }
   },
   "outputs": [],
   "source": [
    "pd.merge(df_left,df_right,how='outer') # 둘 중 한군데라도 있으면 출력"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "강의목차",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
